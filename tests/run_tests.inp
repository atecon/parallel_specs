set verbose off
clear

include "./src/parallel_specs.inp" --force
include assertion.gfn


function void test_write_arg_bundles (void)
    print "Start testing write_arg_bundles()"

    bundles ArgBundles = null
    scalar error = 0
    strings ret = write_arg_bundles(ArgBundles, &error)
    assert_equal_num(nelem(ret), 0)
    assert_false(error)

    scalar error = 0
    bundle B1 = defbundle("scal", 1, "mat", ones(2,1))
    bundle B2 = defbundle("scal", 2, "mat", ones(2,3))
    bundles ArgBundles = defarray(B1, B2)
    strings ret = write_arg_bundles(ArgBundles, &error)

    assert_false(error)
    assert_equal_num(nelem(ret), 2)
    assert_equal_str(ret[1], "PS_bundle_1.xml")
    assert_equal_str(ret[2], "PS_bundle_2.xml")

    assert_true(inbundle(bread("PS_bundle_1.xml"), scal))
    assert_true(inbundle(bread("PS_bundle_1.xml"), mat))

    assert_true(inbundle(bread("PS_bundle_2.xml"), scal))
    assert_true(inbundle(bread("PS_bundle_2.xml"), mat))
end function
test_write_arg_bundles()


function void test_has_mpi_support (void)
    print "Start testing has_mpi_support()"

    if $sysinfo.mpi == TRUE
        assert_true(has_mpi_support())
    else
        assert_false(has_mpi_support())
    endif
end function
test_has_mpi_support()


function void test_n_jobs_exceeds_nproc (void)
    printf "\nStart testing n_jobs_exceeds_nproc()"

    scalar nproc = $sysinfo.nproc

    assert_true(n_jobs_exceeds_nproc(nproc+1))
    assert_false(n_jobs_exceeds_nproc(nproc))
    assert_false(n_jobs_exceeds_nproc(nproc-1))
end function
test_n_jobs_exceeds_nproc()


function void test_write_usercode (void)
    printf "\nStart testing write_usercode()"

    string filename = "write_usercode_test.inp"
    string code = "some nice code here\n New line to execute"
    scalar error = 0
    write_usercode(code, filename, &error)

    assert_false(error)
    string code_read = readfile(filename)
    assert_true(strlen(code_read))
end function
test_write_usercode()


#==========================================================
# Sample script
function void write_user_code (void)
    outfile code4PS.inp --quiet
        print "include SVAR.gfn"
        print "open sw_ch14.gdt --preserve"
        print "list X = LHUR ldiff(PUNEW)"
        print "list Z = const"
        print "scalar param = PS_ARGUMENTS.my_param"
        # The 'PS_ARGUMENTS' name is the default name which parallel_specs expects.
        # Name 'my_param' must match the element key in each arg
        # bundle (below).
        # 'PS_APPLICATION' is also a default name which parallel_specs expects.
        printf "bundle PS_APPLICATION = SVAR_setup(\"C\", X, Z, param)\n"
        print "PS_APPLICATION.horizon = 36"
        printf "SVAR_restrict(&PS_APPLICATION, \"C\", 1, 2)\n"
        print "SVAR_estimate(&PS_APPLICATION)"
    end outfile
end function

function bundles specify_args_for_sample_code (void)
    bundle b1 = defbundle("my_param", 3)
    bundle b2 = defbundle("my_param", 4)
    bundles ArgBundles = defarray(b1, b2)

    bundles Results = parallel_specs(readfile("code4PS.inp"), \
      ArgBundles)

    return Results
end function

function void test_sample_output (const bundles Results)
    printf "\n Start testing bundles we've got."

    loop foreach i Results -q
        assert_true(nelem($i))
    endloop
end function


write_user_code()
bundles Results = specify_args_for_sample_code()
test_sample_output(Results)


printf "\nInfo: All tests passed.\n"
