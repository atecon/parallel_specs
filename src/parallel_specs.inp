function void display_workers_output (const int n_jobs,
                                      const bool debugging,
                                      scalar *error)
    /* Print results of workers. */

    loop i=1..n_jobs -q
        printf "Info: Output for argument set %d:\n", i

        string filename = sprintf("PS_output_%d.txt", i)
        catch printf "%s", readfile(filename)
        if $error
            printf "\nError: Cannot read file '%s'.\n", filename
            scalar error = 1
        endif

        remove_file(filename, debugging)
    endloop
end function


function void remove_file (const string filename,
                           const bool debugging)
    /* Remove temporary output file. */

    if !debugging
        catch remove(filename)
        if $error
            printf "\nWarning: Cannot remove file '%s'.\n", filename
        endif
    endif
end function


function bundles create_output_array (const strings filenames_bundles,
                                      const bool debugging,
                                      scalar *error)
    /* Assemble the returned array. */

    print "Info: Assembling bundles for return."
    bundles B = array(nelem(filenames_bundles))

    loop foreach i filenames_bundles -q
        catch B[i] = bread(filenames_bundles[i])
        if $error
            printf "\nError: Cannot read bundle file '%s'.\n", filenames_bundles[i]
            scalar error = 1
        endif
        remove_file(filenames_bundles[i], debugging)
    endloop

    return B
end function


function scalar has_mpi_support (void)
    /* Check that MPI is supported. */

    if !$sysinfo.mpi
        printf "\nError: No MPI support present, Aborting.\n"
        return 0
    else
        return 1
    endif
end function


function scalar n_jobs_exceeds_nproc (const int n_jobs)
    /* */
    # FIXME: Why does this fail? We could loop over subsets of n_jobs
    if n_jobs > $sysinfo.nproc
        printf "\nError: Number of bundles passed (%d) exceeds\n\
          available processors (%d), Aborting.", n_jobs, $sysinfo.nproc
        return 1
    else
        return 0
    endif
end function


function strings write_arg_bundles (const bundles ArgumentSets,
                                    scalar *error)
/* Write out bundles containing the argument sets.
    return: array of filenames written. */

    strings filenames_bundles = array(nelem(ArgumentSets))

    loop i=1..nelem(ArgumentSets) -q
        filenames_bundles[i] = sprintf("PS_bundle_%d.xml", i)

        catch bwrite(ArgumentSets[i], filenames_bundles[i])
        if $error
            printf "\nError: Failed to write bundle %d to\n\
              %s. Abort.\n", $i, filenames_bundles[i]
            scalar error = 1
            return array(0)     # If one case fails, all fail - think about it
        endif
    endloop

    return filenames_bundles
end function


function void write_usercode (const string usercode,
                                const string filename_usercode,
                                scalar *error)
    /* Write out script with user's code for execution via MPI. */

    catch outfile "@filename_usercode" --quiet
        print  "/* Script created by parallel_specs (gretl) */"
        print usercode
    end outfile

    if $error
        printf "\nError: Failed to write user code into '%s'.\n", filename_usercode
        scalar error = 1
    endif
end function


function void invoke_mpi (const int n_jobs[1::],
                          const string filename_usercode,
                          const string name_application_bundle,
                          const string name_argument_bundle,
                          scalar *error)
    /* Actualy execution of MPI part. */

    print "Info: Invoking MPI (this could take a while)"
    flush

    catch mpi
        scalar process_id = $mpirank + 1
        string outname = sprintf("PS_output_%d.txt", process_id)

        outfile "@outname" --quiet
            string bunfile = sprintf("PS_bundle_%d.xml", process_id)
            bundle @name_argument_bundle = bread(bunfile)

            run "@filename_usercode"

            # standard closing code
            printf "\nInfo: Computation with arg set %d complete.\n", process_id
            scalar err = bwrite(@name_application_bundle, bunfile)
            if err
                printf "Error: %s", errmsg(err)
            endif
        end outfile
    end mpi --np=n_jobs

    if $error
        scalar error = 1
    else
        print "Info: MPI jobs finished."
    endif
end function


function bundles parallel_specs (const string usercode "Code to execute",
                                 const bundles ArgumentSets "Job arguments",
                                 string name_application_bundle[null] "Bundle to which arguments are passed",
                                 string name_argument_bundle[null] "Name of bundle holding job arguments",
                                 const bool debugging[FALSE])
    /* Parallel execution of code. */

    scalar error = 0
    bundles Bout = null
    scalar n_jobs = nelem(ArgumentSets)
    string filename_usercode = "PS_script.inp"

    # Run some checks
    if !nelem(ArgumentSets)
        printf "\nError: Passed array of bundles is empty.\n"
        return Bout
    endif
    if !strlen(usercode)
        printf "\nError: Pass some user code.\n"
        return Bout
    endif
    if n_jobs_exceeds_nproc(n_jobs)
        return Bout
    endif
    if !has_mpi_support()
        return Bout
    endif

    # Set default values if necessary
    if !exists(name_application_bundle)
        string name_application_bundle = "PS_APPLICATION"
    endif
    if !exists(name_argument_bundle)
        string name_argument_bundle = "PS_ARGUMENTS"
    endif

    strings filenames_bundles = write_arg_bundles(ArgumentSets, &error)
    if error
        return Bout
    endif

    write_usercode(usercode, filename_usercode, &error)
    if error
        return Bout
    endif

    invoke_mpi(n_jobs, filename_usercode, name_application_bundle, name_argument_bundle, &error)
    if error
        return Bout
    endif

    display_workers_output(n_jobs, debugging, &error)
    if error
        return Bout
    endif

    bundles Bout = create_output_array(filenames_bundles, debugging, &error)
    if error
        return Bout
    endif

    remove_file(filename_usercode, debugging)

    return Bout
end function


