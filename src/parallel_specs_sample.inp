clear
set verbose off

# Reminder:
# everything goes into your currently active working dir!

if $sysinfo.hostname == "ati7"
    set workdir "/home/at/git/parallel_specs"
endif

catch include "./src/parallel_specs.inp" --force
if $error
  include "./parallel_specs.inp" --force
endif
#include parallel_specs.gfn --force


# Select which example to run
scalar RUN_EXAMPLE = 3    # 1 to 3


if RUN_EXAMPLE == 1
  print "A trivial hello world example"

  # preliminary: define internal transfer names
  string argkey = "param"     # key of parameter value to be read
  string appkey = "param"     # key of parameter value used within the application

  # step 1: create the script code
  # Both 'PS_APPLICATION' and 'PS_ARGUMENTS' are argument names which are recommened to be used.
  string line1 = "bundle PS_APPLICATION"
  string line2 = sprintf("\nPS_APPLICATION.%s = PS_ARGUMENTS.%s\n", appkey, argkey)
  string usercode = line1 ~ line2

  # step 2: specify and pack the different variants
  bundle b1 = defbundle(argkey, "hello")
  bundle b2 = defbundle(argkey, "world")
  bundles argarray = defarray(b1, b2)

  # step 3: run in parallel
  bundles bbresult = parallel_specs(usercode, argarray)

  # step 4: print results
  loop i=1..nelem(bbresult) -q
    eval bbresult[i]
  endloop
  print "End of the trivial hello world example"


elif RUN_EXAMPLE == 2
  print "A trivial hello world example (start) with user-specific argument names"
  /*
    In this example, we shos how to use your own argument names:
    - 'PS_APPLICATION' is now called 'Mod'
    - 'PS_ARGUMENTS' is now called 'Container'
  */

  # preliminary: define internal transfer names
  string argkey = "param"     # key of parameter value to be read
  string appkey = "param"     # key of parameter value used within the application

  # step 1: create the script code
  string line1 = "bundle Mod"
  string line2 = sprintf("\nMod.%s = Container.%s\n", appkey, argkey)
  string usercode = line1 ~ line2

  # step 2: specify and pack the different variants
  bundle b1 = defbundle(argkey, "hello")
  bundle b2 = defbundle(argkey, "world")
  bundles argarray = defarray(b1, b2)

  # step 3: run in parallel -- note that the user-specific argument
  # names need to be passed here
  bundles bbresult = parallel_specs(usercode, argarray, "Mod", "Container")

  # step 4: print results
  loop i=1..nelem(bbresult) -q
    eval bbresult[i]
  endloop
  print "End of the trivial hello world example"


elif RUN_EXAMPLE == 3
  /*
  In this example we execute (part of an adapted version of)
  the example script from the SVAR addon.
  The difference is that we run in parallel (with MPI) two
  different specifications:
  1. with lag order 3
  2. with lag order 4
  */

  /*
  First we create the relevant gretl/hansl script command file.
  In practice, better to have the file prepared beforehand,
  and not write it inline with all these 'print' commands!)
  */
  outfile code4PS.inp --quiet
    print "include SVAR.gfn"
    print "open sw_ch14.gdt --preserve" # --preserve needed here!!
    print "list X = LHUR ldiff(PUNEW)"
    print "list Z = const"
    print "scalar param = PS_ARGUMENTS.lag_order"
    # Name 'lag_order' must match the element key in each arg
    # bundle (below).

    printf "bundle PS_APPLICATION = SVAR_setup(\"C\", X, Z, param)\n"

    print "PS_APPLICATION.horizon = 36"
    printf "SVAR_restrict(&PS_APPLICATION, \"C\", 1, 2)\n"
    print "SVAR_estimate(&PS_APPLICATION)"
  end outfile

  string usercode = readfile("code4PS.inp")
  # specify and pack the different variants
  bundle b1 = defbundle("lag_order", 3)
  # 'lag_order' to match the code above
  bundle b2 = defbundle("lag_order", 4)
  bundles argarray = defarray(b1, b2)

  # run in parallel
  bundles bbresult = parallel_specs(usercode, argarray)

  print "main script: eval the bundles we got"
  loop i=1..nelem(bbresult) -q
    eval bbresult[i]
  endloop


  ######## Third example (or 2b) #################################
  /* Uncomment the code portion below to get an impression of the
  speed gain in the second example, augmented with a bootstrap.
  This compares the speed of a single specification with two ones
  in parallel. (Should be roughly the same on two CPU cores.)
  */

  /*
  # reuse the code above
  string usercode = readfile("code4PS.inp")
  # add the bootstrap call
  usercode ~= "numfail = SVAR_boot(&PS_APPLICATION, 2000, 0.90)"

  # run with a single spec
  set stopwatch
  argarray = defarray(b1)
  bbresult = parallel_specs(usercode, argarray)
  singlespec = $stopwatch

  # run with two specs
  argarray = defarray(b1, b2)
  bbresult = parallel_specs(usercode, argarray)
  twospecs = $stopwatch

  printf "Single vs. two specs time: %g, %g\n", singlespec, twospecs
  */

endif
